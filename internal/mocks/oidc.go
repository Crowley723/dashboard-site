// Code generated by MockGen. DO NOT EDIT.
// Source: oidc_provider.go
//
// Generated by this command:
//
//	mockgen -source=oidc_provider.go -destination=../mocks/oidc.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	middlewares "homelab-dashboard/internal/middlewares"
	models "homelab-dashboard/internal/models"
	reflect "reflect"

	oidc "github.com/coreos/go-oidc/v3/oidc"
	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockOIDCProvider is a mock of OIDCProvider interface.
type MockOIDCProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOIDCProviderMockRecorder
	isgomock struct{}
}

// MockOIDCProviderMockRecorder is the mock recorder for MockOIDCProvider.
type MockOIDCProviderMockRecorder struct {
	mock *MockOIDCProvider
}

// NewMockOIDCProvider creates a new mock instance.
func NewMockOIDCProvider(ctrl *gomock.Controller) *MockOIDCProvider {
	mock := &MockOIDCProvider{ctrl: ctrl}
	mock.recorder = &MockOIDCProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOIDCProvider) EXPECT() *MockOIDCProviderMockRecorder {
	return m.recorder
}

// GenerateRandString mocks base method.
func (m *MockOIDCProvider) GenerateRandString(bytes int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandString", bytes)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateRandString indicates an expected call of GenerateRandString.
func (mr *MockOIDCProviderMockRecorder) GenerateRandString(bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandString", reflect.TypeOf((*MockOIDCProvider)(nil).GenerateRandString), bytes)
}

// GetOAuth2Config mocks base method.
func (m *MockOIDCProvider) GetOAuth2Config() *oauth2.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuth2Config")
	ret0, _ := ret[0].(*oauth2.Config)
	return ret0
}

// GetOAuth2Config indicates an expected call of GetOAuth2Config.
func (mr *MockOIDCProviderMockRecorder) GetOAuth2Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuth2Config", reflect.TypeOf((*MockOIDCProvider)(nil).GetOAuth2Config))
}

// GetProvider mocks base method.
func (m *MockOIDCProvider) GetProvider() *oidc.Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvider")
	ret0, _ := ret[0].(*oidc.Provider)
	return ret0
}

// GetProvider indicates an expected call of GetProvider.
func (mr *MockOIDCProviderMockRecorder) GetProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvider", reflect.TypeOf((*MockOIDCProvider)(nil).GetProvider))
}

// HandleCallback mocks base method.
func (m *MockOIDCProvider) HandleCallback(ctx *middlewares.AppContext) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCallback", ctx)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCallback indicates an expected call of HandleCallback.
func (mr *MockOIDCProviderMockRecorder) HandleCallback(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCallback", reflect.TypeOf((*MockOIDCProvider)(nil).HandleCallback), ctx)
}

// StartLogin mocks base method.
func (m *MockOIDCProvider) StartLogin(ctx *middlewares.AppContext) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLogin", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLogin indicates an expected call of StartLogin.
func (mr *MockOIDCProviderMockRecorder) StartLogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLogin", reflect.TypeOf((*MockOIDCProvider)(nil).StartLogin), ctx)
}
