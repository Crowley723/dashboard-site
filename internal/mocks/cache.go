// Code generated by MockGen. DO NOT EDIT.
// Source: cache_provider.go
//
// Generated by this command:
//
//	mockgen -source=cache_provider.go -destination=../mocks/cache.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	data "homelab-dashboard/internal/data"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheProvider is a mock of CacheProvider interface.
type MockCacheProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCacheProviderMockRecorder
	isgomock struct{}
}

// MockCacheProviderMockRecorder is the mock recorder for MockCacheProvider.
type MockCacheProviderMockRecorder struct {
	mock *MockCacheProvider
}

// NewMockCacheProvider creates a new mock instance.
func NewMockCacheProvider(ctrl *gomock.Controller) *MockCacheProvider {
	mock := &MockCacheProvider{ctrl: ctrl}
	mock.recorder = &MockCacheProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheProvider) EXPECT() *MockCacheProviderMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCacheProvider) Delete(ctx context.Context, query string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, query)
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheProviderMockRecorder) Delete(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheProvider)(nil).Delete), ctx, query)
}

// Get mocks base method.
func (m *MockCacheProvider) Get(ctx context.Context, queryName string) (data.CachedData, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, queryName)
	ret0, _ := ret[0].(data.CachedData)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheProviderMockRecorder) Get(ctx, queryName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheProvider)(nil).Get), ctx, queryName)
}

// ListAll mocks base method.
func (m *MockCacheProvider) ListAll(ctx context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListAll indicates an expected call of ListAll.
func (mr *MockCacheProviderMockRecorder) ListAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockCacheProvider)(nil).ListAll), ctx)
}

// Set mocks base method.
func (m *MockCacheProvider) Set(ctx context.Context, queryName string, arg2 data.CachedData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", ctx, queryName, arg2)
}

// Set indicates an expected call of Set.
func (mr *MockCacheProviderMockRecorder) Set(ctx, queryName, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheProvider)(nil).Set), ctx, queryName, arg2)
}

// Size mocks base method.
func (m *MockCacheProvider) Size(ctx context.Context) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size", ctx)
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockCacheProviderMockRecorder) Size(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockCacheProvider)(nil).Size), ctx)
}
