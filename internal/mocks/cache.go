// Code generated by MockGen. DO NOT EDIT.
// Source: cache_provider.go
//
// Generated by this command:
//
//	mockgen -source=cache_provider.go -destination=../mocks/cache.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	data "homelab-dashboard/internal/data"
	reflect "reflect"

	model "github.com/prometheus/common/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheProvider is a mock of CacheProvider interface.
type MockCacheProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCacheProviderMockRecorder
	isgomock struct{}
}

// MockCacheProviderMockRecorder is the mock recorder for MockCacheProvider.
type MockCacheProviderMockRecorder struct {
	mock *MockCacheProvider
}

// NewMockCacheProvider creates a new mock instance.
func NewMockCacheProvider(ctrl *gomock.Controller) *MockCacheProvider {
	mock := &MockCacheProvider{ctrl: ctrl}
	mock.recorder = &MockCacheProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheProvider) EXPECT() *MockCacheProviderMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCacheProvider) Delete(query string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", query)
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheProviderMockRecorder) Delete(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheProvider)(nil).Delete), query)
}

// EstimateSize mocks base method.
func (m *MockCacheProvider) EstimateSize() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateSize")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateSize indicates an expected call of EstimateSize.
func (mr *MockCacheProviderMockRecorder) EstimateSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateSize", reflect.TypeOf((*MockCacheProvider)(nil).EstimateSize))
}

// Get mocks base method.
func (m *MockCacheProvider) Get(queryName string) (data.CachedData, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", queryName)
	ret0, _ := ret[0].(data.CachedData)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheProviderMockRecorder) Get(queryName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheProvider)(nil).Get), queryName)
}

// ListAll mocks base method.
func (m *MockCacheProvider) ListAll() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListAll indicates an expected call of ListAll.
func (mr *MockCacheProviderMockRecorder) ListAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockCacheProvider)(nil).ListAll))
}

// Set mocks base method.
func (m *MockCacheProvider) Set(queryName string, value model.Value, requireAuth bool, requiredGroup string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", queryName, value, requireAuth, requiredGroup)
}

// Set indicates an expected call of Set.
func (mr *MockCacheProviderMockRecorder) Set(queryName, value, requireAuth, requiredGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheProvider)(nil).Set), queryName, value, requireAuth, requiredGroup)
}

// Size mocks base method.
func (m *MockCacheProvider) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockCacheProviderMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockCacheProvider)(nil).Size))
}
