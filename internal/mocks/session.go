// Code generated by MockGen. DO NOT EDIT.
// Source: session_provider.go
//
// Generated by this command:
//
//	mockgen -source=session_provider.go -destination=../mocks/session.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	middlewares "homelab-dashboard/internal/middlewares"
	models "homelab-dashboard/internal/models"
	http "net/http"
	reflect "reflect"
	time "time"

	oidc "github.com/coreos/go-oidc/v3/oidc"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionProvider is a mock of SessionProvider interface.
type MockSessionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSessionProviderMockRecorder
	isgomock struct{}
}

// MockSessionProviderMockRecorder is the mock recorder for MockSessionProvider.
type MockSessionProviderMockRecorder struct {
	mock *MockSessionProvider
}

// NewMockSessionProvider creates a new mock instance.
func NewMockSessionProvider(ctrl *gomock.Controller) *MockSessionProvider {
	mock := &MockSessionProvider{ctrl: ctrl}
	mock.recorder = &MockSessionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionProvider) EXPECT() *MockSessionProviderMockRecorder {
	return m.recorder
}

// ClearOauthCodeVerifier mocks base method.
func (m *MockSessionProvider) ClearOauthCodeVerifier(ctx *middlewares.AppContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearOauthCodeVerifier", ctx)
}

// ClearOauthCodeVerifier indicates an expected call of ClearOauthCodeVerifier.
func (mr *MockSessionProviderMockRecorder) ClearOauthCodeVerifier(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearOauthCodeVerifier", reflect.TypeOf((*MockSessionProvider)(nil).ClearOauthCodeVerifier), ctx)
}

// ClearOauthNonce mocks base method.
func (m *MockSessionProvider) ClearOauthNonce(ctx *middlewares.AppContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearOauthNonce", ctx)
}

// ClearOauthNonce indicates an expected call of ClearOauthNonce.
func (mr *MockSessionProviderMockRecorder) ClearOauthNonce(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearOauthNonce", reflect.TypeOf((*MockSessionProvider)(nil).ClearOauthNonce), ctx)
}

// ClearOauthState mocks base method.
func (m *MockSessionProvider) ClearOauthState(ctx *middlewares.AppContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearOauthState", ctx)
}

// ClearOauthState indicates an expected call of ClearOauthState.
func (mr *MockSessionProviderMockRecorder) ClearOauthState(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearOauthState", reflect.TypeOf((*MockSessionProvider)(nil).ClearOauthState), ctx)
}

// CreateSessionWithTokenExpiry mocks base method.
func (m *MockSessionProvider) CreateSessionWithTokenExpiry(ctx *middlewares.AppContext, idToken *oidc.IDToken, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionWithTokenExpiry", ctx, idToken, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSessionWithTokenExpiry indicates an expected call of CreateSessionWithTokenExpiry.
func (mr *MockSessionProviderMockRecorder) CreateSessionWithTokenExpiry(ctx, idToken, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionWithTokenExpiry", reflect.TypeOf((*MockSessionProvider)(nil).CreateSessionWithTokenExpiry), ctx, idToken, user)
}

// GetCreatedAt mocks base method.
func (m *MockSessionProvider) GetCreatedAt(ctx *middlewares.AppContext) (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedAt", ctx)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCreatedAt indicates an expected call of GetCreatedAt.
func (mr *MockSessionProviderMockRecorder) GetCreatedAt(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedAt", reflect.TypeOf((*MockSessionProvider)(nil).GetCreatedAt), ctx)
}

// GetCurrentUser mocks base method.
func (m *MockSessionProvider) GetCurrentUser(ctx *middlewares.AppContext) (*models.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser", ctx)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MockSessionProviderMockRecorder) GetCurrentUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockSessionProvider)(nil).GetCurrentUser), ctx)
}

// GetExpiresAt mocks base method.
func (m *MockSessionProvider) GetExpiresAt(ctx *middlewares.AppContext) (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiresAt", ctx)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetExpiresAt indicates an expected call of GetExpiresAt.
func (mr *MockSessionProviderMockRecorder) GetExpiresAt(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiresAt", reflect.TypeOf((*MockSessionProvider)(nil).GetExpiresAt), ctx)
}

// GetOauthCodeVerifier mocks base method.
func (m *MockSessionProvider) GetOauthCodeVerifier(ctx *middlewares.AppContext) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOauthCodeVerifier", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOauthCodeVerifier indicates an expected call of GetOauthCodeVerifier.
func (mr *MockSessionProviderMockRecorder) GetOauthCodeVerifier(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOauthCodeVerifier", reflect.TypeOf((*MockSessionProvider)(nil).GetOauthCodeVerifier), ctx)
}

// GetOauthNonce mocks base method.
func (m *MockSessionProvider) GetOauthNonce(ctx *middlewares.AppContext) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOauthNonce", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOauthNonce indicates an expected call of GetOauthNonce.
func (mr *MockSessionProviderMockRecorder) GetOauthNonce(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOauthNonce", reflect.TypeOf((*MockSessionProvider)(nil).GetOauthNonce), ctx)
}

// GetOauthState mocks base method.
func (m *MockSessionProvider) GetOauthState(ctx *middlewares.AppContext) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOauthState", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOauthState indicates an expected call of GetOauthState.
func (mr *MockSessionProviderMockRecorder) GetOauthState(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOauthState", reflect.TypeOf((*MockSessionProvider)(nil).GetOauthState), ctx)
}

// GetRedirectAfterLogin mocks base method.
func (m *MockSessionProvider) GetRedirectAfterLogin(ctx *middlewares.AppContext) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedirectAfterLogin", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRedirectAfterLogin indicates an expected call of GetRedirectAfterLogin.
func (mr *MockSessionProviderMockRecorder) GetRedirectAfterLogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedirectAfterLogin", reflect.TypeOf((*MockSessionProvider)(nil).GetRedirectAfterLogin), ctx)
}

// GetTokenExpiry mocks base method.
func (m *MockSessionProvider) GetTokenExpiry(ctx *middlewares.AppContext) (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenExpiry", ctx)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTokenExpiry indicates an expected call of GetTokenExpiry.
func (mr *MockSessionProviderMockRecorder) GetTokenExpiry(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenExpiry", reflect.TypeOf((*MockSessionProvider)(nil).GetTokenExpiry), ctx)
}

// GetUser mocks base method.
func (m *MockSessionProvider) GetUser(ctx *middlewares.AppContext) (*models.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockSessionProviderMockRecorder) GetUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockSessionProvider)(nil).GetUser), ctx)
}

// IsAuthenticated mocks base method.
func (m *MockSessionProvider) IsAuthenticated(ctx *middlewares.AppContext) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthenticated", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthenticated indicates an expected call of IsAuthenticated.
func (mr *MockSessionProviderMockRecorder) IsAuthenticated(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthenticated", reflect.TypeOf((*MockSessionProvider)(nil).IsAuthenticated), ctx)
}

// IsSessionValid mocks base method.
func (m *MockSessionProvider) IsSessionValid(ctx *middlewares.AppContext) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSessionValid", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSessionValid indicates an expected call of IsSessionValid.
func (mr *MockSessionProviderMockRecorder) IsSessionValid(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSessionValid", reflect.TypeOf((*MockSessionProvider)(nil).IsSessionValid), ctx)
}

// IsUserAuthenticated mocks base method.
func (m *MockSessionProvider) IsUserAuthenticated(ctx *middlewares.AppContext) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserAuthenticated", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserAuthenticated indicates an expected call of IsUserAuthenticated.
func (mr *MockSessionProviderMockRecorder) IsUserAuthenticated(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserAuthenticated", reflect.TypeOf((*MockSessionProvider)(nil).IsUserAuthenticated), ctx)
}

// LoadAndSave mocks base method.
func (m *MockSessionProvider) LoadAndSave(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAndSave", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// LoadAndSave indicates an expected call of LoadAndSave.
func (mr *MockSessionProviderMockRecorder) LoadAndSave(next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAndSave", reflect.TypeOf((*MockSessionProvider)(nil).LoadAndSave), next)
}

// Logout mocks base method.
func (m *MockSessionProvider) Logout(ctx *middlewares.AppContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockSessionProviderMockRecorder) Logout(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockSessionProvider)(nil).Logout), ctx)
}

// SetAuthenticated mocks base method.
func (m *MockSessionProvider) SetAuthenticated(ctx *middlewares.AppContext, authenticated bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAuthenticated", ctx, authenticated)
}

// SetAuthenticated indicates an expected call of SetAuthenticated.
func (mr *MockSessionProviderMockRecorder) SetAuthenticated(ctx, authenticated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthenticated", reflect.TypeOf((*MockSessionProvider)(nil).SetAuthenticated), ctx, authenticated)
}

// SetCreatedAt mocks base method.
func (m *MockSessionProvider) SetCreatedAt(ctx *middlewares.AppContext, createdAt time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCreatedAt", ctx, createdAt)
}

// SetCreatedAt indicates an expected call of SetCreatedAt.
func (mr *MockSessionProviderMockRecorder) SetCreatedAt(ctx, createdAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreatedAt", reflect.TypeOf((*MockSessionProvider)(nil).SetCreatedAt), ctx, createdAt)
}

// SetExpiresAt mocks base method.
func (m *MockSessionProvider) SetExpiresAt(ctx *middlewares.AppContext, expiresAt time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExpiresAt", ctx, expiresAt)
}

// SetExpiresAt indicates an expected call of SetExpiresAt.
func (mr *MockSessionProviderMockRecorder) SetExpiresAt(ctx, expiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpiresAt", reflect.TypeOf((*MockSessionProvider)(nil).SetExpiresAt), ctx, expiresAt)
}

// SetOauthCodeVerifier mocks base method.
func (m *MockSessionProvider) SetOauthCodeVerifier(ctx *middlewares.AppContext, verifier string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOauthCodeVerifier", ctx, verifier)
}

// SetOauthCodeVerifier indicates an expected call of SetOauthCodeVerifier.
func (mr *MockSessionProviderMockRecorder) SetOauthCodeVerifier(ctx, verifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOauthCodeVerifier", reflect.TypeOf((*MockSessionProvider)(nil).SetOauthCodeVerifier), ctx, verifier)
}

// SetOauthNonce mocks base method.
func (m *MockSessionProvider) SetOauthNonce(ctx *middlewares.AppContext, state string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOauthNonce", ctx, state)
}

// SetOauthNonce indicates an expected call of SetOauthNonce.
func (mr *MockSessionProviderMockRecorder) SetOauthNonce(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOauthNonce", reflect.TypeOf((*MockSessionProvider)(nil).SetOauthNonce), ctx, state)
}

// SetOauthState mocks base method.
func (m *MockSessionProvider) SetOauthState(ctx *middlewares.AppContext, state string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOauthState", ctx, state)
}

// SetOauthState indicates an expected call of SetOauthState.
func (mr *MockSessionProviderMockRecorder) SetOauthState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOauthState", reflect.TypeOf((*MockSessionProvider)(nil).SetOauthState), ctx, state)
}

// SetRedirectAfterLogin mocks base method.
func (m *MockSessionProvider) SetRedirectAfterLogin(ctx *middlewares.AppContext, redirectAfterLogin string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRedirectAfterLogin", ctx, redirectAfterLogin)
}

// SetRedirectAfterLogin indicates an expected call of SetRedirectAfterLogin.
func (mr *MockSessionProviderMockRecorder) SetRedirectAfterLogin(ctx, redirectAfterLogin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRedirectAfterLogin", reflect.TypeOf((*MockSessionProvider)(nil).SetRedirectAfterLogin), ctx, redirectAfterLogin)
}

// SetTokenExpiry mocks base method.
func (m *MockSessionProvider) SetTokenExpiry(ctx *middlewares.AppContext, expiry time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTokenExpiry", ctx, expiry)
}

// SetTokenExpiry indicates an expected call of SetTokenExpiry.
func (mr *MockSessionProviderMockRecorder) SetTokenExpiry(ctx, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTokenExpiry", reflect.TypeOf((*MockSessionProvider)(nil).SetTokenExpiry), ctx, expiry)
}

// SetUser mocks base method.
func (m *MockSessionProvider) SetUser(ctx *middlewares.AppContext, user *models.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUser", ctx, user)
}

// SetUser indicates an expected call of SetUser.
func (mr *MockSessionProviderMockRecorder) SetUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockSessionProvider)(nil).SetUser), ctx, user)
}
